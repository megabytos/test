Для подключения модуля (контроллера какой-либо обработки) необходимо в файле
создать обьект унаследовный от обьекта Module прописанный в additive.main.js.
Этот самый обьект передается через requirejs в конфиге.

В метод init приходит 2 параметра:
    - data - данные о текущей детали
    - global_data - массив всех деталей + дополнительные данные для модулей
                        настраивается в Additives->initAdditives

Модули доступны по ключу из обьекта g_detail методом getModule(id).

Пример пустого модуля:

define(function (require, exports, module) {
    var module = {
        // наследуюмся это обьекта Module переданный из additive.main.js
        '__proto__': module.config(),
        // перечисляем специфические свойства (переопределяем)
        inputs: {
            // список полей ввода
        },
        methods: {
            // инвенты для полей ввода
        },
        functions: {
            // остальные функции
        },
        init(data, global_data) {
            // init method
        },
        reinit(data) {
            // reinit method, for default can use init
            module.init(data);
        }
    };

    return module;
});


Описание модуля (подробно о каждом параметре):
    1) cache
    Хранилище для данных, в нем хранятся ссылки на поля ввода в параметре inputs,
    который кастомизировать далее не рекомендуется. Сам cache стоит использовать
    для хранения дополнительных данных.

    2) functions
    Набор кастомных функций (вызывать можно на прямую либо через метод use, который
    описан дальше).

    3) methods
    Набор методов срабатыващих при change или click в зависимости от типа соответствующего
    инпута. Привязка к методов к инпутам осуществляет путем вызова метода initInputs,
    либо initInput с указанием идентификатора инпута.

    4) inputs
    Список полей ввода. При переопредилении оформлять геттерам.
    Например: get input() { return document.getElementBuId('input'); }

    5) getval(id)
    Функция возвращающая значение поля по ее ключу.

    6) setval(id, val)
    Функция задающая значение полю по ее ключу и значению val.

    7) method(id, val)
    Функция эмулирует запуск метода привязаного к полю ввода без его участия. Запускаемый
    метод определяется идентификатором, а значение эмулируется переданым val.

    8) change(id, val)
    Функция запускает метод инпута с его участием и присвоением параметра.

    9) focus(id)
    Фокусирует ввод на поле ввода по ключу.

    10) disabled(id, val)
    Деактивирует либо активирует инпут по ключу в зависимости от значения val (true/false).

    11) hideinput(id)
    Скрывает поле (если массив - поля) ввода по ключу.

    12) showinput(id)
    Отображает поле (если массив - поля) ввода по ключу.

    13) isshow(id)
    Возвращает значение видимостии поля ввода (true/false).

    14) initInput(id)
    Привязывается событие к инпуту по ключу при его наличии.

    15) initInputs()
    Привязывает ко всем инпутам соответствующие им события.

    16) reinitInput(id)
    Заново определяет событие поля ввода по ключу.

    17) addFunction(id, func)
    Добавляет в список functions функцию с ключем id и логичкой func.

    18) use(id, params)
    Запускает функцию из списка functions по ключу и передает в него
    параметры перечисленые в массиве params (params только как массив,
    но в функции как отдельные параметры)

    19) addInput(id, get)
    Добавляет поле ввода в список inputs с ключем id и функцией get
    определяющей способ получения html-елемента

    20) addInputs(arr)
    Аналог addInput принимующий массив с обьектами типа:
    {id: 'id', get() { return document.getElementById('id'); }}

    21) init(data, global_data)
    Метод запускающийся для инициализации модуля.

    22) reinit(data)
    Метод запускающийся для обновления данных о детали. Как data передается
    выбранная деталь.

    23) super()
    Init поумолчанию. (удалить его что ли нафиг)

    24) checked(id, val)
    Метод для инициализацие значения чекбоксов. (можно применять через setval)

    25) ischecked(id)
    Метод возвращающий значение чекбокса. (можно применять через getval)

    26) validate(detailValidateData)
    Метод возвращающий валидацию детали.
