
везде где можно использовать const вмето let и var
везде использовать let вместо var  (т.к. переменная объявленная с помощью var (глобальная) существует еще до того как она была объявлена)
console.log(a);
var a = 5;
Выдаст значение undefined, а не ошибку
Это называется ВСПЛЫТИЕ ПЕРЕМЕННОЙ (hoisting) (или "поднятие переменной")


"use strict"; - переход в строгий режим (для всего скрипта или отдельной функции)




Спец Типы данных:
-----------------------
NaN - когда результат ЧИСЛОВОЙ (математической) операции - не число (Not a Number) (относится к типу "число")   		1 * undefined; // => NaN   		parseFloat('Joker12.5'); // => NaN			parseInt('Joker12', 10); // => NaN
Number('Joker12'); // => NaN
Infinity - результат деления на ноль (относится к типу "число")  .. также есть -Infinity  -5/0
true/false - булевы
null - переменной не существует
undefined - переменная существует, но у нее не объявлено значение

Спец Объекты:
-----------------------
Массив  (внутри массива могут быть любые типы данных .. в том числе и объекты {} и другие массивы [] )  ключи массива ТОЛЬКО числовые
Функция
Дата
Регулярное выражение
Ошибка


let arr = [1, [2,'apple'], {a:3,b:8}, function cc(m) { return m+4;}];
console.log(arr[2]['a']);
console.log(arr[2].b);
console.log(arr[3](9));

Любые инпуты в JS возвращают текстовое значение (ВСЕГДА НУЖНО ДЕЛАТЬ ПРЕОБРАЗОВАНИЕ ТИПА)
const age = prompt('Укажите ваш возраст'); - возвратит строку
const age = +prompt('Укажите ваш возраст'); - возвратит число (динамическая типизация)

Шаблонные строки:
--------------------------------
const category = 'toys';
let url = `https://site.com/${category}/5`;
вложенные:
const classes = `header ${ isLargeScreen() ? '' : `icon-${item.isCollapsed ? 'expander' : 'collapser'}` }`;


let aa =5;
console.log(aa++); - постфиксная форма инкремента  - выдаст 5  (увеличит переменную после операции инкремента
console.log(++aa); - префиксная форма инкремента - выдаст 6 (увеличит переменную во время операции инкремента
